openapi: 3.0.0
info:
  description: WASAText app backend REST API
  title: WASAText API
  version: 1.0.0
servers:
  - url: http://localhost:3000/v1

tags:
  - name: "Login"
    description: "Endpoints for login."
  - name: "User"
    description: "Endpoints for user operations."
  - name: "Profile picture"
    description: "Endpoints for profile picture operations."
  - name: "Conversation"
    description: "Endpoints for conversation operations."
  - name: "Message"
    description: "Endpoints for message operations."
  - name: "Comment"
    description: "Endpoints for comment operations."
  - name: "Group"
    description: "Endpoints for group operations."

security:
  - bearerAuth: []

paths:
  ##doLogin
  /session/login:
    post:
      tags: ["Login"]
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.  
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              type: object
              description: "Represents a user's name, with validation rules for length and format."
              properties:
                name:
                  type: string
                  description: "The user's name, which must be between 3 and 16 characters in length and match the specified pattern."
                  example: Maria
                  pattern: "^.*?$"
                  minLength: 3
                  maxLength: 16
        required: true
      responses:
        "201":
          description: User log-in action successful
          content:
            application/json:
              schema:
                type: object
                description: "Represents a unique identifier, typically used to reference an entity or object in the system."
                properties:
                  identifier:
                    type: string
                    description: "A unique identifier for an entity, often used to retrieve or reference specific objects."
                    example: "abcdef012345"
                    minLength: 12
                    maxLength: 12
                    pattern: "^[a-zA-Z0-9]{12}$"
        "400": { $ref: "#/components/responses/BadRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  ##doLogout
  /session/logout:
    post:
      tags: ["Login"]
      summary: Logs out the user
      description: |-
        Ends the user's session and invalidates the token if applicable.
      operationId: doLogout
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              type: object
              description: "Represents an identifier, typically used to uniquely reference an entity or object in the system."
              properties:
                identifier:
                  type: string
                  description: "A unique identifier for the entity or object."
                  example: "abcdef012345"
                  minLength: 12
                  maxLength: 12
                  pattern: "^[a-zA-Z0-9]{12}$"
        required: true
      responses:
        "200":
          description: User log-out action successful
          content:
            application/json:
              schema:
                type: object
                description: "Represents a response confirming the successful logout of a user."
                properties:
                  message:
                    type: string
                    description: "A message confirming that the user has logged out successfully."
                    example: "User logged out successfully."
                    minLength: 10
                    maxLength: 100
                    pattern: "^[a-zA-Z0-9 .,!?']+$"
        "400": { $ref: "#/components/responses/BadRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  ##getUserProfile
  /users/{username}/profile:
    get:
      parameters:
      - $ref: "#/components/parameters/username"
      tags: ["User"]
      summary: "Get profile data of a user."
      description: "Retrieve a user's profile data by username."
      operationId: getUserProfile
      responses:
        "200":
          description: "Profile loaded."
          content:
            application/json:
              schema:
                type: object
                description: "Represents user profile information, including the user’s handle and display name."
                properties:
                  user_handle:
                    type: string
                    description: "The unique handle or username of the user."
                    example: "fiore_rossi"
                    minLength: 3
                    maxLength: 30
                    pattern: "^[a-zA-Z0-9_]{3,30}$"
                  screen_name:
                    type: string
                    description: "The display name of the user, typically shown on their profile."
                    example: "Fiore Rossi"
                    minLength: 2
                    maxLength: 50
                    pattern: "^[a-zA-Z ]{2,50}$"
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "500": { $ref: "#/components/responses/InternalServerError" } 
        
  ##getUserPicture
  /users/{username}/picture:
    parameters:
      - $ref: "#/components/parameters/username"
    get:
      tags: ["Profile picture"]
      summary: "Get profile picture of a user."
      description: "Get a user's profile picture."
      operationId: getUserPicture
      responses:
        "200":
          description: "Picture loaded."
          content:
            image/jpeg:
              schema:
                type: string
                description: "Represents file uploads for the profile picture."
                format: binary
                ##minLength: 10
                ##maxLength: 100
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  ##setMyPhoto
    put:
      tags: ["Profile picture"]
      summary: "Upload profile picture."
      description: |-
        The user uploads a profile picture.
      operationId: setMyPhoto
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              description: "Represents a request to upload a picture, typically used for profile or group images."
              properties:
                photo:
                  type: string
                  format: binary
                  description: "The picture to upload."
                  ##minLength: 10
                  ##maxLength: 100
      responses:
        "200":
          description: "Picture uploaded."
          content:
            application/json:
              schema:
                type: object
                description: "Represents the response after successfully uploading a profile picture, including the confirmation message and the URL of the uploaded image."
                properties:
                  message:
                    type: string
                    description: "A message confirming the successful upload of the profile picture."
                    example: "Picture uploaded successfully."
                    minLength: 10
                    maxLength: 100
                    pattern: "^[a-zA-Z0-9 .,!?']+$"

                  profile_picture_url:
                    type: string
                    description: "The URL where the uploaded profile picture can be accessed."
                    format: url
                    example: "https://example.com/profiles/user_uploaded.jpg"
                    minLength: 15
                    maxLength: 255
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  ##setMyUserName
  /users/{username}:
    put:
      parameters:
      - $ref: "#/components/parameters/username"
      tags: ["User"]
      summary: "Update username."
      description: |-
        Updates the username for the user unless such a username is already taken
        by another user.
      operationId: setMyUserName
      requestBody:
        description: "Username"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        required: true
      responses:
        "200":
          description: "Username updated successfully"
          content:
            application/json:
              schema: 
                type: object
                description: "Represents a request to set or update a user's handle (username)."
                properties:
                  user_handle:
                    type: string
                    description: "The updated username for the user."
                    example: "new_username"
                    minLength: 3
                    maxLength: 30
                    pattern: "^[a-zA-Z0-9_]{3,30}$"
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "409":
          description: "Username already taken"
          content:
            application/json:
              schema:
                type: object
                description: "Represents a response indicating that the username is already taken and cannot be used."
                properties:
                  message:
                    type: string
                    description: "A message informing the user that the selected username is already in use."
                    example: "This username is already taken. Please choose a different one."
                    minLength: 10
                    maxLength: 100
                    pattern: "^[a-zA-Z0-9 .,!?']+$"
        "500": { $ref: "#/components/responses/InternalServerError" }

  ##getMyConversations
  /users/{username}/conversations:
    parameters:
      - $ref: "#/components/parameters/username"
    get:
      tags: ["Conversation"]
      summary: "Get a user's conversations."
      description: "Get a user's conversations. Only the user can access their conversations."
      operationId: getMyConversations
      responses:
        "200":
          description: "Conversations retrieved successfully."
          content:
            application/json:
              schema:
                type: object
                description: "Represents a collection of conversations, typically used to retrieve a list of conversations."
                properties:
                  conversations:
                    type: array
                    description: "A list of conversations retrieved from the system."
                    items:
                      $ref: "#/components/schemas/Conversation"
                    minItems: 1
                    maxItems: 50
                required:
                  - conversations
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  ##getConversation
  /users/{username}/conversations/{conversation_id}:
    parameters:
      - $ref: "#/components/parameters/username"
      - $ref: "#/components/parameters/conversation_id"
    get:
      tags: ["Conversation"]
      summary: "Get a specific conversation."
      description: "Get a user's specific conversations. Only the user can access their conversations."
      operationId: getConversation
      responses:
        "200":
          description: "Conversation details retrieved successfully."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Conversation"
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  ##sendMessage
  /users/{username}/conversations/{conversation_id}/messages/:
    parameters:
      - $ref: "#/components/parameters/username"
      - $ref: "#/components/parameters/conversation_id"
    post:
      tags: ["Message"]
      summary: "Send a new message."
      description: "Send a message from the logged-in user to another user"
      operationId: sendMessage
      requestBody:
        description: "The content of the message to be sent"
        required: true
        content:
          application/json:
            schema:
              type: object
              description: "Represents the structure of a message, including its type and content."
              properties:
                type:
                  type: string
                  description: "Type of message content (e.g., 'text' or 'image')."
                  example: "text"
                  minLength: 3
                  maxLength: 20
                  pattern: "^[a-zA-Z]+$"

                content:
                  type: string
                  description: "Message text or image URL, depending on the type."
                  example: "Hey there."
                  minLength: 1
                  maxLength: 500
                  pattern: "^[a-zA-Z0-9 .,!?'\n]*$" 
              required:
                - type
                - content
      responses:
        "201":
          description: "Message sent."
          content:
            application/json:
              schema:
                type: object
                description: "Represents a response confirming the successful sending of a message."
                properties:
                  message:
                    type: string
                    description: "A message confirming the successful delivery of the message."
                    example: "Message sent successfully."
                    minLength: 10
                    maxLength: 100
                    pattern: "^[a-zA-Z0-9 .,!?']+$"
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  ##forwardMessage
  /users/{username}/conversations/{conversation_id}/messages/{message_id}/forward:
    parameters:
      - $ref: "#/components/parameters/username"
      - $ref: "#/components/parameters/conversation_id"
      - $ref: "#/components/parameters/message_id"
    post:
      tags: ["Message"]
      summary: "Forward a message."
      description: "Forward a message from one user to another."
      operationId: forwardMessage
      requestBody:
        description: "The target conversation or recipient for the forwarded message."
        required: true
        content:
          application/json:
            schema:
              type: object
              description: "Represents the data required to forward a message to another conversation or user."
              properties:
                target_conversation_id:
                  type: string
                  description: "ID of the conversation to forward the message to."
                  example: "5678"
                  minLength: 1
                  maxLength: 50
                  pattern: "^[0-9]+$"  

                recipient_username:
                  type: string
                  description: "Username of the recipient if forwarding directly to another user."
                  example: "user_name"
                  minLength: 3
                  maxLength: 30
                  pattern: "^[a-zA-Z0-9_]{3,30}$" 
              required:
                - target_conversation_id
      responses:
        "200":
          description: "Message forwarded successfully."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  ##deleteMessage
  /users/{username}/conversations/{conversation_id}/messages/{message_id}:
    parameters:
      - $ref: "#/components/parameters/username"
      - $ref: "#/components/parameters/conversation_id"
      - $ref: "#/components/parameters/message_id"
    delete:
      tags: ["Message"]
      summary: "Delete a message."
      description: "Delete a specific message from a conversation."
      operationId: deleteMessage
      responses:
        "204":
          description: "Message deleted successfully."
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  ##commentMessage
  /users/{username}/conversations/{conversation_id}/messages/{message_id}/comments:
    parameters:
      - $ref: "#/components/parameters/username"
      - $ref: "#/components/parameters/conversation_id"
      - $ref: "#/components/parameters/message_id"
    post:
      tags: ["Comment"]
      summary: "Add an emoji reaction to a message."
      description: "Leave an emoji reaction on another user's message."
      operationId: commentMessage
      requestBody:
        description: "The emoji reaction to be added to the message."
        required: true
        content:
          application/json:
            schema:
              type: object
              description: "Represents the data required to add an emoji reaction to a message."
              properties:
                emoji:
                  type: string
                  description: "The emoji reaction to add to the message."
                  example: "🌈"
                  minLength: 1
                  maxLength: 1
                  ##pattern: "^[\ud83c[\ud000-\udfff]|\ud83d[\ud000-\udfff]|\ud83e[\ud000-\udfff]]+$"
              required:
                - emoji
      responses:
        "200":
          description: "Emoji reaction added successfully."
          content:
            application/json:
              schema:
                type: object
                description: "Represents a response indicating the success of an operation, such as adding an emoji reaction."
                properties:
                  message:
                    type: string
                    description: "A message confirming the successful completion of the operation."
                    example: "Emoji reaction added successfully."
                    minLength: 10
                    maxLength: 100
                    pattern: "^[a-zA-Z0-9 .,!?']+$"
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/InternalServerError" }
  
  ##uncommentMessage
    delete:
      tags: ["Comment"]
      summary: "Delete an emoji reaction from a message."
      description: "Delete a specific emoji reaction from a message."
      operationId: uncommentMessage
      responses:
        "204":
          description: "Comment deleted successfully."
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  ##setGroupPhoto
  /users/{username}/groups/{group_id}/photo:
    parameters:
      - $ref: "#/components/parameters/username"
      - $ref: "#/components/parameters/group_id"
    put:
      tags: ["Group"]
      summary: "Upload group picture."
      description: "Allows an admin to upload a picture for a group they manage."
      operationId: setGroupPhoto
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              description: "Represents a request to upload a new picture for the group."
              properties:
                photo:
                  type: string
                  format: binary
                  description: "The picture to upload for the group."
                  minLength: 10
                  maxLength: 100
      responses:
        "200":
          description: "Group picture uploaded."
          content:
            application/json:
              schema:
                type: object
                description: "Represents a response indicating the success of an operation, such as uploading a group picture."
                properties:
                  message:
                    type: string
                    description: "A message confirming the successful upload of the group picture."
                    example: "Group picture uploaded successfully."
                    minLength: 10
                    maxLength: 100
                    pattern: "^[a-zA-Z0-9 .,!?']+$"
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  ## setGroupName
  /users/{username}/groups/{group_id}/name:
    parameters:
      - $ref: "#/components/parameters/username"
      - $ref: "#/components/parameters/group_id"
    put:
      tags: ["Group"]
      summary: "Update group name."
      description: "Allows an admin to update the name of a group they manage."
      operationId: setGroupName
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: "Represents a request to update the name of an existing group."
              properties:
                name:
                  type: string
                  description: "The new name for the group."
                  example: "My New Group Name"
                  minLength: 3
                  maxLength: 50
                  pattern: "^[a-zA-Z0-9 ]+$"
      responses:
        "200":
          description: "Group name updated."
          content:
            application/json:
              schema:
                type: object
                description: "Represents a response indicating the success of an operation, such as updating the group name."
                properties:
                  message:
                    type: string
                    description: "A message confirming the successful update of the group name."
                    example: "Group name updated successfully."
                    minLength: 10
                    maxLength: 100
                    pattern: "^[a-zA-Z0-9 .,!?']+$"
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  ##createGroup
  /users/{username}/groups:
    parameters:
      - $ref: "#/components/parameters/username"
    post:
      tags: ["Group"]
      summary: "Create a new group."
      description: "Create a new group chat with the logged-in user as the admin."
      operationId: createGroup
      requestBody:
        description: "Details of the new group."
        required: true
        content:
          application/json:
            schema:
              type: object
              description: "Represents the data required to create or update a group, including the group’s name, description, and list of members."
              properties:
                group_name:
                  type: string
                  description: "The name of the group."
                  example: "The Clique"
                  minLength: 3
                  maxLength: 50
                  pattern: "^[a-zA-Z0-9 ]+$"

                description:
                  type: string
                  description: "A short description of the group."
                  example: "Group for our band."
                  minLength: 5
                  maxLength: 200
                  pattern: "^[a-zA-Z0-9 .]+$"

                members:
                  type: array
                  items:
                    type: string
                    minLength: 3
                    maxLength: 30
                    pattern: "^[a-zA-Z0-9 ]+$"
                  description: "List of usernames to add to the group."
                  example: ["Anna", "Billie", "Karl"]
                  minItems: 1
                  maxItems: 50
              required:
                - group_name
                - members
      responses:
        "201":
          description: "Group created successfully."
          content:
            application/json:
              schema:
                type: object
                description: "Represents the response after successfully creating a new group, including the group's unique identifier and name."
                properties:
                  group_id:
                    type: string
                    description: "The unique identifier of the newly created group."
                    example: "group12345"
                    minLength: 8
                    maxLength: 50
                    pattern: "^[a-zA-Z0-9]+$"

                  group_name:
                    type: string
                    description: "The name of the created group."
                    example: "The Clique"
                    minLength: 3
                    maxLength: 50
                    pattern: "^[a-zA-Z0-9 ]+$"
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "409":
          description: "A group with the same name already exists."
          content:
            application/json:
              schema:
                type: object
                description: "Represents a response indicating an error or conflict, such as when a group name is already taken."
                properties:
                  message:
                    type: string
                    description: "A descriptive message stating that the group name is already in use."
                    example: "Group name already in use."
                    minLength: 10
                    maxLength: 100
                    pattern: "^[a-zA-Z0-9 .]+$"
        "500": { $ref: "#/components/responses/InternalServerError" }
    
  ##addToGroup
  /users/{username}/groups/{group_id}/members:
    parameters:
      - $ref: "#/components/parameters/username"
      - $ref: "#/components/parameters/group_id"
    post:
      tags: ["Group"]
      summary: "Add a member to a group."
      description: "Add a specified user to an existing group."
      operationId: addToGroup
      requestBody:
        description: "The username of the member to be added to the group."
        required: true
        content:
          application/json:
            schema:
              type: object
              description: "Represents a request to add a new member to the system or group."
              properties:
                new_member_username:
                  type: string
                  description: "The username of the new member to add."
                  example: "slow_koala"
                  minLength: 3
                  maxLength: 30
                  pattern: "^[a-zA-Z0-9_]+$"
              required:
                - new_member_username
      responses:
        "200":
          description: "Member added successfully."
          content:
            application/json:
              schema:
                type: object
                description: "Represents a response indicating the result of a member-related action."
                properties:
                  message:
                    type: string
                    description: "A confirmation message indicating that the member was added successfully."
                    example: "Member added successfully."
                    minLength: 10
                    maxLength: 100
                    pattern: "^[a-zA-Z0-9 .]+$"
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "404": { $ref: "#/components/responses/NotFound" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  ##leaveGroup
  /users/{username}/groups/{group_id}/members/{member_username}:
    parameters:
      - $ref: "#/components/parameters/username"
      - $ref: "#/components/parameters/group_id"
      - name: member_username
        in: path
        required: true
        schema:
          type: string
          minLength: 3
          maxLength: 30
          pattern: "^[a-zA-Z0-9_]+$"
        description: "The username of the member who wants to leave the group."
    delete:
      tags: ["Group"]
      summary: "Leave a group."
      description: "Allows a user to leave an existing group."
      operationId: leaveGroup
      responses:
        "204":
          description: "User successfully left the group."
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "404": { $ref: "#/components/responses/NotFound" }
        "409":
          description: "User is already a member of the group."
          content:
            application/json:
              schema:
                type: object
                description: "Represents an error or informational response for group-related actions."
                properties:
                  message:
                    type: string
                    description: "A detailed message indicating the error or status of the request."
                    example: "User is already in the group."
                    minLength: 10
                    maxLength: 100
                    pattern: "^[a-zA-Z0-9. ]+$"
        "500": { $ref: "#/components/responses/InternalServerError" }

components:
  schemas:
    User:
      title: User
      description: "This object represents a single User."
      type: object
      properties:
        current_username:
          description: "Alias for the User."
          type: string
          pattern: '^[^\s]+$'
          minLength: 3
          maxLength: 16
          example: "slow_koala"
          readOnly: false
        id:
          description: "Unique identifier for each user that allows username changing."
          type: integer
          minimum: 0 
          maximum: 9999999
          example: 1
          readOnly: true
      required:
        - current_username
        - id
        
    Conversation:
      type: object
      description: "Represents a conversation between participants, including its metadata."
      properties:
        conversation_id:
          type: string
          description: "Unique identifier for the conversation."
          example: "abc123"
          minLength: 3
          maxLength: 50
          pattern: "^[a-zA-Z0-9_]+$"  
        participants:
          type: array
          description: "A list of participants in the conversation, represented by their usernames."
          items:
            type: string
            description: "Username of a participant in the conversation."
            minLength: 3
            maxLength: 30
            pattern: "^[a-zA-Z0-9_ ]+$"
          example: ["Fiore Rossi", "Ale Bianchi"]
          minItems: 2  
          maxItems: 50
        last_message:
          type: string
          description: "Content of the last message in the conversation."
          example: "Hi how are you doing"
          minLength: 1  
          maxLength: 500  
          pattern: "^[a-zA-Z0-9 ]+$"
      required:
        - participants

    Message:
      title: Message
      description: "This object represents a single message."
      type: object
      properties:
        id:
          description: "Unique identifier for each user that allows username changing."
          type: integer
          minimum: 0 
          maximum: 9999999
          example: 1
          readOnly: true
        timestamp:
          description: "Timestamp when the message was sent."
          type: string
          format: date-time
          example: "2023-10-19T15:23:00Z"
          readOnly: true
          minLength: 20  
          maxLength: 30
        preview:
          description: "A preview of the message, either a text snippet for text messages or a thumbnail URL for image messages."
          type: object
          properties:
            type:
                description: "Type of preview, either 'text' or 'image'."
                type: string
                enum: ["text", "image"]
                example: "text"
                minLength: 3
                maxLength: 10
            content:
                description: "The actual preview content. This is either a text snippet or a URL to a thumbnail image."
                type: string
                example: "This is a preview of the message content."
                minLength: 1
                maxLength: 500
                pattern: "^[a-zA-Z0-9 .]+$"
            thumbnail_url:
                description: "URL of the thumbnail image if the message is an image."
                type: string
                format: url
                example: "https://example.com/path/to/thumbnail.jpg"
                minLength: 10
                maxLength: 200
          required:
          - type
          - content
        comments:
          description: "List of emoji reactions to the message."
          type: array
          items:
            type: object
            properties:
              emoji:
                description: "The emoji used to react to the message."
                type: string
                example: "👍"
                minLength: 1
                maxLength: 1
                pattern: "^[\u0000-\uFFFF]+$"
              user_id:
                description: "Unique identifier of the user who added the reaction."
                type: integer
                minimum: 0 
                maximum: 9999999
                example: 42
              timestamp:
                description: "Timestamp when the reaction was added."
                type: string
                format: date-time
                example: "2023-10-19T15:23:00Z"
                minLength: 20
                maxLength: 30
                readOnly: true
            required:
              - emoji
              - user_id
              - timestamp
          minItems: 1
          maxItems: 50
        message_status:
          description: "Indicates the sender’s username if the message was received, or checkmarks for sent message status."
          type: object
          oneOf:
              - properties:
                    type:
                        description: "Specifies that the message was received by the user."
                        type: string
                        enum: ["received"]
                    sender_username:
                        description: "Username of the sender if the message was received by the user."
                        type: string
                        example: "slow_koala"
                        minLength: 3
                        maxLength: 30
                        pattern: "^[A-Za-z0-9_]*$"
                required:
                    - type
                    - sender_username
              - properties:
                    type:
                        description: "Specifies that the message was sent by the user."
                        type: string
                        enum: ["sent"]
                    checkmarks:
                        description: "Status of the sent message. One checkmark for 'sent', two for 'delivered'."
                        type: integer
                        minimum: 0 
                        maximum: 9999999
                        enum: [1, 2]
                        example: 2
                required:
                    - type
                    - checkmarks
        message_content:
          description: "The content of the message, which can be either text or an image."
          type: object
          properties:
            type:
                description: "Type of content, either 'text' or 'image'."
                type: string
                enum: ["text", "image"]
                example: "text"
            text:
                description: "The text content of the message, present only if the type is 'text'."
                type: string
                example: "Hey bestie."
                minLength: 1
                maxLength: 500
                pattern: "^[A-Za-z0-9 !@#\\$%\\^&\\*()\\-=_+\\[\\]{};':\"\\\\|,.<>/?`~]*$"
            image_url:
                description: "URL of the image if the message contains an image."
                type: string
                format: url
                example: "https://example.com/path/to/image.jpg"
                minLength: 5
                maxLength: 2048
                pattern: "^https?://[\\w.-]+(?:\\.[\\w.-]+)+(?:/[\\w._~:/?#[\\]@!$&'()*+,;=%-]*)?$"
          required:
            - type
      required:
      - id
      - timestamp
      - preview
      - comments
      - message_content
        
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer

  responses:
    BadRequest:
      description: "Invalid/malformed request."
      content:
        application/json:
          schema:
            type: object
            description: "An error response indicating the request was malformed or invalid."
            properties:
              message:
                type: string
                description: "An error response indicating the request was malformed or invalid."
                example: "The request body is malformed."
                minLength: 10
                maxLength: 200
                pattern: "^[A-Z].*\\.$"

    Unauthorized:
      description: "Authentication required."
      content:
        application/json:
          schema:
            type: object
            description: "An error response indicating that the user needs to authenticate."
            properties:
              message:
                type: string
                description: "An error response indicating that the user needs to authenticate."
                example: "Authentication is required to access this resource."
                minLength: 10
                maxLength: 200
                pattern: "^[A-Z].*\\.$"

    InternalServerError:
      description: "Server currently unavailable."
      content:
        application/json:
          schema:
            type: object
            description: "An error response indicating an internal server error."
            properties:
              message:
                type: string
                description: "An error response indicating an internal server error."
                example: "The server is currently unavailable, please try again later."
                minLength: 10
                maxLength: 200
                pattern: "^[A-Z].*\\.$"

    NotFound:
      description: "Resource not found."
      content:
        application/json:
          schema:
            type: object
            description: "An error response indicating the requested resource could not be found."
            properties:
              message:
                type: string
                description: "An error response indicating the requested resource could not be found."
                example: "The requested resource could not be found."
                minLength: 10
                maxLength: 200
                pattern: "^[A-Z].*\\.$"

    Forbidden:
      description: "The operation is forbidden."
      content:
        application/json:
          schema:
            type: object
            description: "An error response indicating that the operation is not allowed."
            properties:
              message:
                type: string
                description: "An error response indicating that the operation is not allowed."
                example: "You do not have permission to perform this operation."
                minLength: 10
                maxLength: 200
                pattern: "^[A-Z].*\\.$"

  parameters:
    username:
      name: username
      in: path
      required: true
      description: "Alias for the User."
      schema:
        type: string
        minLength: 6
        maxLength: 30
        pattern: "^[a-zA-Z0-9_]{6,30}$"
        example: booklover
    
    conversation_id:
      name: conversation_id
      in: path
      required: true
      description: "ID for a conversation."
      schema:
        type: string
        minLength: 6
        maxLength: 30
        example: convo123
        pattern: "^[a-zA-Z0-9_]+$"

    message_id:
      name: message_id
      in: path
      required: true
      description: "ID for a message."
      schema:
        type: string
        minLength: 6
        maxLength: 30
        example: message123
        pattern: "^[a-zA-Z0-9_]+$"

    group_id:
      name: group_id
      in: path
      required: true
      description: "ID for a group."
      schema:
        type: string
        minLength: 6
        maxLength: 30
        example: group123
        pattern: "^[a-zA-Z0-9_]+$"